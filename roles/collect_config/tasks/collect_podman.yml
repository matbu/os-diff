---
- block:
  - name: Get container id {{ service.key }}
    become: yes
    register: results
    shell: |
      podman ps | grep Up | awk '/{{ service.value.podman_name }}$/  {print $1}'
    when: strict_pod_name_match

  - name: Set fact for container id {{ service.key }}
    set_fact:
      container_id: "{{ results.stdout_lines[0] }}"
    when: strict_pod_name_match

  - name: Get container id {{ service.key }}
    become: yes
    register: results
    shell: |
      podman ps | grep Up | awk '/{{ service.value.podman_name }}/  {print $1}'
    when: not strict_pod_name_match

  - name: Set fact for container id {{ service.key }}
    set_fact:
      container_id: "{{ results.stdout_lines[0] }}"
    when: not strict_pod_name_match

  - name: Set fact for service name
    set_fact:
      service_name: "{{ service.key }}"

  - name: Set fact for {{ service_name }} path
    set_fact:
      config_path: "{{ service.value.path }}"

  - name: Create {{ service_name }} directory
    become: true
    file:
      path: "{{ working_dir }}/{{ tripleo_collect_dir }}/{{ service_name }}/{{ item }}"
      state: directory
      mode: "0755"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_id }}"
      recurse: true
    loop: "{{ config_path }}"

  - name: Pull configuration files from podman container {{ service.key }} - per items
    ignore_errors: yes
    command: podman cp {{ container_id }}:{{ item }} {{ working_dir }}/{{ tripleo_collect_dir }}/{{ service_name }}/{{ item }}
    become: yes
    when: pull_items
    loop: "{{ service.value.name }}"

  - name: Pull configuration files from podman container {{ service_name }} - all
    ignore_errors: yes
    command: podman cp {{ container_id }}:{{ item }} {{ working_dir }}/{{ tripleo_collect_dir }}/{{ service_name }}/{{ config_path }}/
    become: yes
    when: not pull_items
    loop: "{{ config_path }}"
